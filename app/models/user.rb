require 'digest/sha1'

class User < ActiveRecord::Base
  has_many :comments
  has_many :topics


  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_and_belongs_to_many :roles
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    @_list ||= self.roles.collect(&:name)
    return true if @_list.include?("admin")
    (@_list.include?(role_in_question.to_s) )
  end
  # ---------------------------------------
  
  include Authentication
  include Authentication::ByPassword
  include Authentication::ByCookieToken
  include Authorization::AasmRoles

  validates_presence_of     :login
  validates_length_of       :login,    :within => 3..40
  validates_uniqueness_of   :login
  validates_format_of       :login,    :with => Authentication.login_regex, :message => Authentication.bad_login_message

  validates_format_of       :fname,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message
  validates_length_of       :fname,     :maximum => 100

  validates_format_of       :lname,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message
  validates_length_of       :lname,     :maximum => 100

  validates_presence_of     :email
  validates_length_of       :email,    :within => 6..100 #r@a.wk
  validates_uniqueness_of   :email
  validates_format_of       :email,    :with => Authentication.email_regex, :message => Authentication.bad_email_message

  LOGIN_MIN_LENGTH = 3
  LOGIN_MAX_LENGTH = 20
  EMAIL_MIN_LENGTH = 6
  EMAIL_MAX_LENGTH = 100
  NAME_MAX_LENGTH = 50
  PASSWORD_MAX_LENGTH = 20
  LOGIN_SIZE = 20
  PASSWORD_SIZE = 20
  EMAIL_SIZE = 30
  NAME_SIZE = 30
  ACTIVATION_CODE_SIZE = 30


  # HACK HACK HACK -- how to do attr_accessible from here?
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :fname, :lname, :password, :password_confirmation
  attr_accessor :current_password, :new_password

  def clear_password!
    self.password, self.password_confirmation, self.current_password, self.new_password = nil
  end


  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  #
  # uff.  this is really an authorization, not authentication routine.  
  # We really need a Dispatch Chain here or something.
  # This will also let us return a human error message.
  #
  def self.authenticate(login, password)
    return nil if login.blank? || password.blank?
    u = find_in_state :first, :active, :conditions => {:login => login.downcase} # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  def login=(value)
    write_attribute :login, (value ? value.downcase : nil)
  end

  def email=(value)
    write_attribute :email, (value ? value.downcase : nil)
  end

  def update_password(attributes)
    errors.add :current_password and return false unless self.authenticated?(attributes[:current_password])
    self.password = attributes[:new_password]
    self.password_confirmation = attributes[:password_confirmation]
    return false unless valid?
    save
  end

  def reset_password
    new_password = generate_password(10)
    self.password = new_password
    self.password_confirmation = new_password
    return false unless valid?
    save
  end

  protected
      def make_activation_code
            self.deleted_at = nil
            self.activation_code = self.class.make_token
      end

  #########################################################################
  # This Generate password randomly get from
  #
  # http://travisonrails.com/2007/06/07/generate-random-text-with-ruby
  #########################################################################
  def generate_password(length=6)
    chars = 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ23456789'
    password = ''
    length.times { |i| password << chars[rand(chars.length)] }
    password
  end
end
